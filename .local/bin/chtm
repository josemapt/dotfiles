#!/usr/bin/python

from typing import List, Dict, Any
from collections.abc import Mapping
from pathlib import Path
from sys import stderr
import yaml
import os


class Alacritty:
    def __init__(self):
        self.base_path = Path().home() / '.config' / 'alacritty'

        self.config_file = self.base_path / 'alacritty.yml'

        self.config = self._load(self.config_file)

        self.resources = {
            'themes': {
                'type': 'Themes directory',
                'path': self.base_path / 'themes',
                'exists': lambda: self.resources['themes']['path'].is_dir(),
                'create': lambda: self.resources['themes']['path'].mkdir()
            },
        }

    def _load(self, yaml_file: Path) -> Dict[str, Any]:
        with open(yaml_file) as f:
            return yaml.load(f, Loader=yaml.FullLoader)

    def apply(self, **config):
        if config is None or len(config) < 1:
            raise ConfigError('No options provided')
        
        actions = {
            'theme': self.change_theme,
            'list': self.list,
        }

        for param, action in actions.items():
            if param in config:
                action(config[param])
    
    def save(self):
        with open(self.config_file,  'w') as f:
            yaml.dump(self.config, f)


    def change_theme(self, theme: str):
        themes_directory = Path().home() / '.config' / 'alacritty' / 'themes'
        theme_file = themes_directory / f'{theme}.yaml'

        if not theme_file.is_file():
            raise ConfigError(f'Theme "{theme}" not found')

        theme_yaml = self._load(theme_file)
        self.config['colors'] = theme_yaml['colors']


    def list(self, to_be_listed: str):
        def list_themes():
            themes_dir = Path().home() / '.config' / 'alacritty' / 'themes'

            print("\033[1;34mAvaliable themes:\033[0m")

            for theme in os.listdir(themes_dir):
                print(theme.replace(".yaml", ""))

        options = {
            'themes': list_themes,
            'all': list_themes,
        }

        if to_be_listed not in options:
            raise ConfigError(f'Cannot list {to_be_listed}, unknown option')
        options[to_be_listed]()

#=============================================================================================

from typing import Dict, Any
import argparse

def args() -> Dict[str, Any]:
    parser = argparse.ArgumentParser(
        prog='chtm',
        description='Change your Alacritty config on the fly!',
        usage='chtm [OPTIONS]',
        formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=80),
        argument_default=argparse.SUPPRESS,
    )
    parser.add_argument(
        '-t', '--theme',
        help='Change theme, choose from ~/.config/alacritty/themes'
    )
    parser.add_argument(
        '-l', '--list',
        nargs='?',
        const='all',
        choices=['fonts', 'themes', 'all'],
        help='List all available options from resource, default is "all"'
    )


    return vars(parser.parse_args())
#=============================================================================================

if __name__ == '__main__':
    alacritty = Alacritty()
    alacritty.apply(**args())
    alacritty.save()